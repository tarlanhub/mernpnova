{"version":3,"sources":["actions/uiActions.js","actions/statusActions.js","actions/authActions.js","actions/types.js","components/Login.js","components/Register.js","reducers/authReducer.js","reducers/uiReducer.js","reducers/statusReducer.js","reducers/index.js","store.js","components/HomePage.js","components/App.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["buttonClicked","dispatch","getState","type","BUTTON_CLICKED","buttonReset","BUTTON_RESET","isLoading","IS_LOADING","returnStatus","msg","status","id","GET_STATUS","payload","isAuth","axios","get","withCredentials","then","res","AUTH_SUCCESS","data","catch","err","AUTH_FAIL","register","name","email","password","body","JSON","stringify","post","headers","response","REGISTER_FAIL","login","console","log","LOGIN_SUCCESS","LOGIN_FAIL","logout","delete","LOGOUT_SUCCESS","AUTH_ERROR","REGISTER_SUCCESS","CLEAR_STATUS","Login","state","onChange","e","setState","target","value","onSubmit","preventDefault","user","props","this","prevProps","statusMsg","className","button","Card","CardBody","CardTitle","CardSubtitle","to","Alert","color","Form","FormGroup","Label","for","Input","size","placeholder","Button","style","marginTop","block","loading","Spinner","Component","connect","ui","isAuthenticated","auth","Register","setTimeout","history","push","alert","respCode","initialState","combineReducers","action","middleware","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","divStyle","HomePage","class","role","aria-label","exact","path","component","TheLayout","React","lazy","App","Suspense","fallback","render","Profile","onLogout","authState","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45bf3a5a.chunk.js","sourcesContent":["import {\n  BUTTON_CLICKED,\n  BUTTON_RESET,\n  IS_LOADING\n} from \"./types\";\n\nexport const buttonClicked = () => (dispatch, getState) => {\n  dispatch({type: BUTTON_CLICKED});\n};\n\nexport const buttonReset = () => (dispatch, getState) => {\n  dispatch({type: BUTTON_RESET});\n};\n\nexport const isLoading = () => (dispatch, getState) => {\n  dispatch({type: IS_LOADING});\n};\n","import { GET_STATUS, CLEAR_STATUS } from './types';\n\n// RETURN STATUS\nexport const returnStatus = (msg, status, id = null) => {\n  return {\n    type: GET_STATUS,\n    payload: { msg, status, id}\n  };\n};\n\n// CLEAR STATUS\nexport const clearStatus = () => {\n  return {\n    type: CLEAR_STATUS\n  };\n};","import axios from \"axios\";\nimport { returnStatus } from \"./statusActions\";\n\nimport {\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  AUTH_SUCCESS,\n  AUTH_FAIL,\n  LOGOUT_SUCCESS,\n  IS_LOADING,\n} from \"./types\";\n\n//Uncomment below for local testing\n// axios.defaults.baseURL = \"http://localhost:5000\";\n\n//uncomment and set url to your own for prod\n//axios.defaults.baseURL = \"https://demos.shawndsilva.com/sessions-auth-app\"\n\n//Check if user is already logged in\nexport const isAuth = () => (dispatch) => {\n\n    axios\n    .get(\"/api/users/authchecker\",{withCredentials:true})\n    .then((res) =>\n      dispatch({\n        type: AUTH_SUCCESS,\n        payload: res.data\n      })\n    )\n    .catch((err) => {\n      dispatch({\n        type: AUTH_FAIL\n      });\n    });\n\n}\n\n//Register New User\nexport const register = ({ name, email, password }) => (dispatch) => {\n  // Headers\n  const headers = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  // Request body\n  const body = JSON.stringify({ name, email, password });\n\n  axios\n    .post(\"/api/users/register\", body, headers)\n    .then((res) =>{\n      dispatch(returnStatus(res.data, res.status, 'REGISTER_SUCCESS'));\n      dispatch({ type: IS_LOADING })\n    })\n    .catch((err) => {\n      dispatch(returnStatus(err.response.data, err.response.status, 'REGISTER_FAIL'))\n      dispatch({\n        type: REGISTER_FAIL\n      });\n      dispatch({ type: IS_LOADING })\n    });\n};\n\n//Login User\nexport const login = ({ email, password }) => (dispatch) => {\n  // Headers\n  const headers = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  // Request body\n  const body = JSON.stringify({ email, password });\n\n  axios\n    .post(\"/api/users/login\", body, headers)\n    .then((res) => {\n      console.log(res);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      dispatch({ type: IS_LOADING });\n    }\n    )\n    .catch((err) => {\n      dispatch(returnStatus(err.response.data, err.response.status, 'LOGIN_FAIL'))\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      dispatch({ type: IS_LOADING })\n    });\n};\n\n//Logout User and Destroy session\nexport const logout = () => (dispatch) => {\n\n    axios\n    .delete(\"/api/users/logout\", { withCredentials: true })\n    .then((res) =>\n      dispatch({\n        type: LOGOUT_SUCCESS,\n      })\n    )\n    .catch((err) => {\n      console.log(err);\n    });\n\n}","export const AUTH_ERROR = \"AUTH_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const GET_STATUS = 'GET_STATUS';\nexport const CLEAR_STATUS = 'CLEAR_STATUS';\nexport const BUTTON_CLICKED = 'BUTTON_CLICKED';\nexport const BUTTON_RESET = 'BUTTON_RESET';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const AUTH_FAIL = 'AUTH_FAIL';\nexport const IS_LOADING = 'IS_LOADING';","import React, { Component } from 'react'\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Card,\n   CardTitle,\n   CardSubtitle,\n  CardBody,\n  Alert,\n  Spinner\n} from \"reactstrap\";\nimport { connect } from \"react-redux\"; // API to connect component state to redux store\nimport PropTypes from \"prop-types\";\nimport { buttonClicked,isLoading } from \"../actions/uiActions\";\nimport { login } from \"../actions/authActions\";\n\nimport { Link } from 'react-router-dom'\nimport './style.css';\n\n\n\nclass Login extends Component {\n\n  state = {\n    email: \"\",\n    password: \"\",\n    msg: \"\"\n  }\n\n  static propTypes = {\n    buttonClicked: PropTypes.func.isRequired,\n    isLoading: PropTypes.func.isRequired,\n    button: PropTypes.bool,\n    login: PropTypes.func.isRequired,\n    isAuthenticated: PropTypes.bool,\n    status: PropTypes.object.isRequired,\n    loading: PropTypes.bool\n  };\n\n  componentDidMount() {\n    this.props.buttonClicked();\n}\n\ncomponentDidUpdate(prevProps) {\n      const status = this.props.status;\n\n     if (status !== prevProps.status) {\n\n      if (status.id === \"LOGIN_FAIL\") {\n        this.setState({ msg: status.statusMsg });\n      }\n    }\n};\n\n\nonChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\nonSubmit = (e) => {\n    e.preventDefault();\n\n    const { email, password} = this.state;\n\n    const user = { email, password};\n    this.props.isLoading();\n    this.props.login(user);\n  };\n\n\n  render() {\n\n    let className = 'divStyle';\n    if (!this.props.button) {\n      className = 'formStyle';\n    }\n    return (\n      <div className={className}>\n\n            <Card>\n                <CardBody >\n                  <CardTitle> <h2><strong>Login</strong></h2></CardTitle>\n                <CardSubtitle className=\"text-muted\">Don't have an account?\n                <Link to=\"/register\"> Register. </Link></CardSubtitle>\n                <br/>\n                {this.state.msg ? (\n              <Alert color=\"danger\">{this.state.msg}</Alert>\n            ) : null}\n                  <Form onSubmit={this.onSubmit} >\n                  <FormGroup>\n\n                    <Label for=\"email\">E-mail</Label>\n                    <Input\n                      type=\"email\"\n                      name=\"email\"\n                      id=\"email\"\n                      size=\"lg\"\n                      placeholder=\"you@youremail.com\"\n                      className=\"mb-3\"\n                      onChange={this.onChange}\n                    />\n\n                    <Label for=\"password\">Password</Label>\n                    <Input\n                      type=\"password\"\n                      name=\"password\"\n                      id=\"password\"\n                      size=\"lg\"\n                      placeholder=\"Enter your Password\"\n                      className=\"mb-3\"\n                      onChange={this.onChange}\n                    />\n                    <Button size=\"lg\" color=\"dark\" style={{ marginTop: \"2rem\" }} block>\n                       { this.props.loading ?\n                       <span >Logging in.. <Spinner size=\"sm\" color=\"light\" /></span> : <span>Login</span>}\n                    </Button>\n                  </FormGroup>\n                </Form>\n                </CardBody>\n            </Card>\n\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({ //Maps state element in redux store to props\n  //location of element in the state is on the right and key is on the left\n  button: state.ui.button, //store.getState().ui.button another way to get button bool\n  isAuthenticated: state.auth.isAuthenticated,\n  status: state.status,\n  loading: state.ui.loading\n});\n\nexport default connect(mapStateToProps,{ login, isLoading, buttonClicked })(Login);\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Card,\n  CardTitle,\n  CardSubtitle,\n  CardBody,\n  Alert,\n  Spinner\n} from \"reactstrap\";\nimport { connect } from \"react-redux\"; // API to connect component state to redux store\nimport PropTypes from \"prop-types\";\nimport { buttonClicked, isLoading } from \"../actions/uiActions\";\nimport { Link } from \"react-router-dom\";\nimport { register } from \"../actions/authActions\";\nimport \"./style.css\";\n\nclass Register extends Component {\n  state = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    msg: \"\"\n  };\n\n  static propTypes = {\n    buttonClicked: PropTypes.func.isRequired,\n    button: PropTypes.bool,\n    register: PropTypes.func.isRequired,\n    status: PropTypes.object.isRequired,\n    loading: PropTypes.bool\n  };\n\n  // Removes sign in and register buttons from homepage\n  // upon mounting of Register component\n  componentDidMount() {\n    this.props.buttonClicked();\n  }\n\n  componentDidUpdate(prevProps) {\n    const status = this.props.status;\n\n    // Changes status message if it is different from previous message\n    if (status !== prevProps.status) {\n      if (status.id === \"REGISTER_FAIL\") {\n        this.setState({ msg: status.statusMsg });\n      } else {\n        this.setState({ msg: this.props.status.statusMsg });\n      }\n    }\n\n    // Redirects to Log In screen after a delay of 2secs if successfully registered\n    if (status.id === \"REGISTER_SUCCESS\") {\n      setTimeout(() => {\n        this.props.history.push(\"/login\");\n      }, 2000);\n    }\n  }\n\n  // Sets the value of the input fields to the state items of the same name\n  onChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  // Calls action to register user\n  onSubmit = (e) => {\n    e.preventDefault();\n\n    const { name, email, password } = this.state;\n\n    const user = { name, email, password };\n    this.props.isLoading();\n    this.props.register(user);\n  };\n\n  render() {\n    let className = \"divStyle\";\n\n    // If HTTP 400 error, render alert with red color, else if\n    // it is 200 OK, render alert in green\n    let alert;\n    if (this.state.msg && this.props.status.respCode >= 400) {\n      alert = <Alert color=\"danger\">{this.state.msg}</Alert>;\n    } else if (this.state.msg && this.props.status.respCode === 200) {\n      alert = (\n        <Alert color=\"success\">\n          {this.state.msg} <br /> Redirecting to Log In screen\n        </Alert>\n      );\n    }\n\n    if (!this.props.button) {\n      className = \"formStyle\";\n    }\n    return (\n      <div className={className}>\n        <Card>\n          <CardBody>\n            <CardTitle>\n              <h2>\n                <strong>Register</strong>\n              </h2>\n            </CardTitle>\n            <CardSubtitle className=\"text-muted\">\n              Already have an account?\n              <Link to=\"/login\"> Log In. </Link>\n            </CardSubtitle>\n            <br />\n            {alert}\n            <Form onSubmit={this.onSubmit}>\n              <FormGroup className=\"text-center\">\n                <Label for=\"name\">Name</Label>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"name\"\n                  placeholder=\"Enter your name\"\n                  className=\"mb-3\"\n                  size=\"lg\"\n                  onChange={this.onChange}\n                />\n\n                <Label for=\"email\">E-mail</Label>\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"email\"\n                  placeholder=\"you@youremail.com\"\n                  className=\"mb-3\"\n                  size=\"lg\"\n                  onChange={this.onChange}\n                />\n\n                <Label for=\"password\">Password</Label>\n                <Input\n                  type=\"password\"\n                  name=\"password\"\n                  id=\"password\"\n                  placeholder=\"Enter your Password\"\n                  className=\"mb-3\"\n                  size=\"lg\"\n                  onChange={this.onChange}\n                />\n                <Button color=\"dark\" className=\"mt-5\" size=\"lg\" block>\n                { this.props.loading ?\n                       <span >Registering.. <Spinner size=\"sm\" color=\"light\" /></span> : <span>Register</span>}\n                </Button>\n              </FormGroup>\n            </Form>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  //Maps state to redux store as props\n  button: state.ui.button,\n  status: state.status,\n  loading: state.ui.loading\n});\n\nexport default connect(\n  mapStateToProps,\n  { register, isLoading, buttonClicked }\n)(Register);\n","import {\n\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  AUTH_SUCCESS,\n  AUTH_FAIL\n} from \"../actions/types\";\n\n\nconst initialState = {\n  isAuthenticated: null,\n  user: null,\n};\n\nexport default function (state = initialState, action) {\n\n  switch (action.type) {\n    case REGISTER_SUCCESS:\n      return {\n        ...state,\n        user: action.payload\n      };\n\n    case LOGIN_SUCCESS:\n    case AUTH_SUCCESS:\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload\n      };\n\n    case AUTH_ERROR:\n    case LOGIN_FAIL:\n    case LOGOUT_SUCCESS:\n    case REGISTER_FAIL:\n    case AUTH_FAIL:\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n      }\n\n    default:\n        return state;\n  }\n\n}","import {\n  BUTTON_CLICKED,\n  BUTTON_RESET,\n  IS_LOADING,\n} from \"./../actions/types\";\n\nconst initialState = {\n  button: true,\n  loading: false\n};\n\nexport default function (state = initialState, action ) {\n  switch (action.type) {\n    case BUTTON_CLICKED:\n      return {\n        ...state,\n        button: false\n      };\n\n      case BUTTON_RESET:\n      return {\n        ...state,\n        button: true\n      };\n\n      case IS_LOADING:\n        return {\n          ...state,\n          loading: !state.loading\n        };\n    default:\n        return state;\n  }\n}","import { GET_STATUS, CLEAR_STATUS} from '../actions/types';\n\nconst initialState = {\n  statusMsg: {},\n  respCode: null,\n  id: null\n}\n\nexport default function(state = initialState, action) {\n  switch(action.type) {\n    case GET_STATUS:\n      return {\n        statusMsg: action.payload.msg,\n        respCode: action.payload.status,\n        id: action.payload.id\n      }\n\n    case CLEAR_STATUS:\n      return {\n        statusMsg: {},\n        respCode: null,\n        id: null\n      };\n\n    default:\n      return state;\n  }\n\n}","import { combineReducers} from 'redux';\n// import errorReducer from './errorReducer';\nimport authReducer from './authReducer';\nimport uiReducer from './uiReducer';\nimport statusReducer from './statusReducer';\n\n\nexport default combineReducers({\n    // error: errorReducer,\n    auth: authReducer,\n    ui: uiReducer,\n    status: statusReducer\n});","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\nconst middleware = [thunk];\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, initialState, composeEnhancers(\n    applyMiddleware(...middleware),\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    ));\n\nexport default store;","import React, { Component } from 'react';\nimport Login from './Login';\nimport Register from './Register';\nimport { connect } from \"react-redux\";\nimport { Route, Switch, Link } from 'react-router-dom'\nimport {\n  Button,\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport { buttonClicked } from \"../actions/uiActions\";\nimport './style.css';\nimport store from '../store';\nimport { isAuth } from '../actions/authActions'\nimport {Redirect} from 'react-router-dom'\n\n\nvar divStyle = {\ncolor:'white'\n};\n\nexport class HomePage extends Component {\n\n  componentDidMount() {\n    // Check if session cookie is present\n    store.dispatch(isAuth());\n  }\n\n  static propTypes = {\n    button: PropTypes.bool,\n    isAuthenticated: PropTypes.bool,\n  };\n\n  render() {\n\n    if(this.props.isAuthenticated) {\n      return <Redirect to=\"/profile\" />\n    }\n    \n\n\n    return (\n      <>\n      <div class=\"header\">\n      \n      <h1 class=\"header__title\">Come code with us.</h1>\n     </div>\n     \n   \n\n      <div className=\"container\">\n      <div className=\"main\">\n      <h1 style={divStyle}> <strong>NOVA</strong> Sessions Auth App </h1>\n        <br/>\n          <h5 style={divStyle}>Minimalistic Sessions based Authentication app <span role=\"img\" aria-label=\"lock\">🔒 </span><br></br>Built with React + Redux, NodeJS, Express, MongoDB and Bootstrap</h5>\n          <h5 style={divStyle}>Uses Cookies <span role=\"img\" aria-label=\"lock\">🍪 </span></h5>\n        <br/>\n        <div>\n\n          <Switch>\n            <Route exact path =\"/login\" component={Login}/>\n            <Route exact path =\"/register\" component={Register}/>\n          </Switch>\n\n           { this.props.button && <Link className='divStyle' to=\"/login\">\n             <Button size=\"lg\"  color=\"light\">Sign In</Button>\n             </Link>}\n\n           {this.props.button && <Link className='divStyle' to=\"/register\">\n             <Button  size=\"lg\"  color=\"light\">Register</Button>\n           </Link>}\n           <Redirect to=\"./Register\" />\n        </div>\n      </div>\n      </div>\n      \n \n  </>\n          \n    )\n  }\n}\nconst mapStateToProps = (state) => ({ //Maps state to redux store as props\n  button: state.ui.button,\n  isAuthenticated: state.auth.isAuthenticated\n\n});\n\nexport default connect(mapStateToProps)(HomePage);\n","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport './scss/style.scss';\n\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n)\n\n// Containers\nconst TheLayout = React.lazy(() => import('./containers/TheLayout'));\n\n// Pages\nconst Login = React.lazy(() => import('./views/pages/login/Login'));\nconst Register = React.lazy(() => import('./views/pages/register/Register'));\nconst Page404 = React.lazy(() => import('./views/pages/page404/Page404'));\nconst Page500 = React.lazy(() => import('./views/pages/page500/Page500'));\n\nclass App extends Component {\n\n  render() {\n    return (\n      <HashRouter>\n          <React.Suspense fallback={loading}>\n            <Switch>\n          \n              <Route path=\"/\" name=\"Home\" render={props => <TheLayout {...props}/>} />\n            </Switch>\n          </React.Suspense>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport {\n  Button,\n  Card,\n CardTitle,\n  CardSubtitle,\n  CardBody\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport './style.css';\nimport { Redirect } from 'react-router-dom'\nimport { logout } from '../actions/authActions';\nimport { buttonReset} from '../actions/uiActions';\nimport App from './App';\n\nexport class Profile extends Component {\n\n  static propTypes = {\n    button: PropTypes.bool,\n    authState: PropTypes.object.isRequired,\n    buttonReset: PropTypes.func.isRequired,\n    logout: PropTypes.func.isRequired,\n  };\n\n\n  onLogout = (e) => {\n    e.preventDefault();\n    this.props.buttonReset();\n    this.props.logout();\n  };\n\n  render() {\n\n    if(!this.props.authState.isAuthenticated) {\n      return <Redirect to=\"/\" />\n    }\n\n    const {user} = this.props.authState;\n\n    return (\n      \n     <>\n        <App/>\n         \n          \n           \n             \n          \n         </>\n        \n      \n       \n\n    \n    )\n  }\n}\nconst mapStateToProps = (state) => ({ //Maps state to redux store as props\n  button: state.ui.button,\n  authState: state.auth\n});\n\nexport default connect(mapStateToProps, { logout, buttonReset })(Profile);\n","import React , { Component } from 'react';\nimport HomePage from './components/HomePage';\nimport Profile from './components/Profile';\nimport { Route, Switch} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n\nclass App extends Component {\n\n  render () {\n    return (\n      <Provider store={store}>\n            <Switch>\n              <Route exact path =\"/profile\" component={Profile}/>\n            </Switch>\n        < HomePage/>\n      </Provider>\n    );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\n\nReactDOM.render(\n  //REMOVE BASENAME if not hosting from sub directory\n  <BrowserRouter >\n    <App />\n  </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}